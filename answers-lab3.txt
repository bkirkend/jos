1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
Having an individual handler function provides a lot more flexibility and protection. With this way, you can make specific exception handlers to be for specific DPLs. For example, the syscall handler is for DPL 3 whereas other handlers are for DPL 0. This makes it more protected because it makes the kernel interact with some and users interact with the other exceptions (syscall exceptions). 

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?
Nothing was done to make the user/softint program behave correctly. This is because the DPL for a page fault exception is 0, so only for the kernel. However, because the user/softint is for users, it hits the trap 13 which is for general protection fault. If the kernel actually allowed softint's 14 instruction to invoke the kernel page this could be a vulnerability in the system because that means a user level permission could use a kernel level process.